name: CI
on:
  push:
    branches: [ master, feature/* ]
  pull_request:
    branches: [ master, feature/* ]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 16.x ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Cache node_modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci --no-audit --progress=false
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm run test -- --watch false --progress false --browsers ChromeHeadlessCI --code-coverage
      - name: Build
        run: npm run build
      - name: Archive production artifact
        uses: actions/upload-artifact@master
        with:
          name: cv
          path: |
            dist
            reports

  coveralls:
    name: Coveralls
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: cv
      - name: Send coverage to Coveralls
        uses: coverallsapp/github-action@v1.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./reports/coverage/lcov.info

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: cv
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
